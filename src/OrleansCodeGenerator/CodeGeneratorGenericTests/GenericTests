using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Xunit;
using Shouldly;

using Orleans;
using Orleans.TestingHost;

namespace OrleansTests
{
    public interface ISecretNinjaTestGrain : IGrainWithIntegerKey
    {
        Task<int> FakeGeneric<T>();
        Task<int> GenericArg<T>(T data);
        Task<T> SimpleGeneric<T>();
        Task<int> SimpleGenericInteger<T>();
        Task<int> SimpleInteger();
        Task<T> VeryGeneric<T>(T data);
        Task<string> MultiGeneric<T, T2, T3>(T t, T2 t2, T3 t3);
        Task<T3> BreakDance<T, T2, T3>(T t, T2 t2, T3 t3);
        Task<T> LessSimpleGeneric<T>(T one, T two);
    }

    public class SecretNinjaTestGrain : Grain, ISecretNinjaTestGrain
    {
        public Task<int> SimpleInteger() => Task.FromResult(3);
        public Task<int> SimpleGenericInteger<T>() => Task.FromResult(3);
        public Task<T> SimpleGeneric<T>() => Task.FromResult(default(T));
        public Task<int> FakeGeneric<T>() => Task.FromResult(3);
        public Task<int> GenericArg<TDifferent>(TDifferent data) => Task.FromResult(3);
        public Task<T> VeryGeneric<T>(T data) => Task.FromResult(data);
        public Task<string> MultiGeneric<T, T2, T3>(T t, T2 t2, T3 t3) => Task.FromResult($"{t}{t2}{t3}");
        public Task<T3> BreakDance<T, T2, T3>(T t, T2 t2, T3 t3) => Task.FromResult(t3);
        public Task<T> LessSimpleGeneric<T>(T one, T two)
        {
            return Task.FromResult<T>(one);
        }
    }

    public class GenericTests : TestingSiloHost, IDisposable
    {
        public void Dispose()
        {
            StopAllSilos();
        }
        

        [Fact]
        public void GenericMethodsShouldWork()
        {
            var ninja = GrainFactory.GetGrain<ISecretNinjaTestGrain>(0);

            ninja.SimpleInteger().Result.ShouldBe(3);
            ninja.SimpleGenericInteger<string>().Result.ShouldBe(3);

            ninja.SimpleGeneric<int>().Result.ShouldBe(0);
            ninja.SimpleGeneric<int>().Result.ShouldBeOfType(typeof(int));

            ninja.FakeGeneric<string>().Result.ShouldBeOfType(typeof(int));
            ninja.FakeGeneric<string>().Result.ShouldBe(3);

            ninja.GenericArg<string>("doesn't matter").Result.ShouldBeOfType(typeof(int));
            ninja.GenericArg<string>("still doesn't matter").Result.ShouldBe(3);

            ninja.VeryGeneric<int>(128).Result.ShouldBe(128);
            ninja.MultiGeneric("this is", " my favorite ", 3.14).Result.ShouldBe("this is my favorite 3.14");
            ninja.BreakDance(1, 2, "fire").Result.ShouldBe("fire");
            ninja.LessSimpleGeneric(1, 2).Result.ShouldBe(1);
        }
    }
}
